{"version":3,"sources":["utils.js","Info.js","Table.js","LineGraph.js","MapView.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","showCirclesOnMap","countries","casesType","map","country","index","Circle","center","countryInfo","lat","long","radius","Math","sqrt","pathOptions","fillColor","color","fillOpacity","Popup","Typography","component","variant","Info","newCases","title","active","todayCases","totalCases","props","Card","className","onClick","numeral","format","Table","sortedCountries","arr","sort","a","b","Fragment","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","gridLines","type","time","parser","tooltipFormat","yAxes","ticks","callback","LineGraph","useState","data","setData","useEffect","fetch","response","json","jsonData","chartData","createChartData","console","log","getHistoricalData","mdata","lastDataPoint","date","newDataPoint","x","y","push","datasets","fill","borderColor","MapView","position","zoom","MapContainer","Map","TileLayer","attribution","url","useMap","setView","App","setCountries","setCountry","countryData","setCountryData","mapZoom","setMapZoom","lng","mapPosition","setMapPosition","setCasesType","getCountries","getAllData","Select","onChange","e","selectedCountry","target","mapObj","getCountryData","MenuItem","todayRecovered","todayDeaths","CardContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3467f510.chunk.js","sourcesContent":["import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport \"./MapView.css\";\r\n\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#008900\",\r\n    multiplier: 400,\r\n  },\r\n  deaths: {\r\n    hex: \"#c40000\",\r\n    multiplier: 600,\r\n  },\r\n};\r\n\r\nexport function sort(countries) {\r\n  const arr = [...countries];\r\n\r\n  arr.sort((a, b) => {\r\n    return b.cases - a.cases;\r\n  });\r\n\r\n  return arr;\r\n}\r\n\r\nexport function showCirclesOnMap(countries, casesType) {\r\n  return countries.map((country, index) => (\r\n    <Circle\r\n      key={index}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n      pathOptions={{\r\n        fillColor: casesTypeColors[casesType].hex,\r\n        color: casesTypeColors[casesType].hex,\r\n        fillOpacity: 0.5,\r\n      }}\r\n    >\r\n      <Popup>\r\n        <Typography component=\"h5\" variant=\"h5\">\r\n          {country.country}\r\n        </Typography>\r\n        <Typography>Cases : {country.cases} </Typography>\r\n        <Typography>Deaths : {country.deaths} </Typography>\r\n        <Typography>Recovered : {country.recovered}</Typography>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n}\r\n\r\nexport function pretty(newCases) {\r\n  return newCases ? `+${numeral(newCases).format(\"0a\")}` : 0;\r\n}\r\n","import { Card, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { pretty } from \"./utils\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Info.css\";\r\n\r\nexport default function Info({\r\n  title,\r\n  active,\r\n  todayCases,\r\n  totalCases,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      className={`infoCard infoCard__${title} \r\n      ${active && `infoCard--selected`}\r\n      `}\r\n      onClick={props.onClick}\r\n    >\r\n      <Typography className=\"infoCard__todayCases\">\r\n        New {title}: {pretty(todayCases)}\r\n      </Typography>\r\n      <Typography className=\"infoCard__totalCases\">\r\n        Total {title}: {numeral(totalCases).format(\"0a\")}\r\n      </Typography>\r\n    </Card>\r\n  );\r\n}\r\n\r\nInfo.propTypes = {\r\n  title: PropTypes.string,\r\n  todayCases: PropTypes.number,\r\n  totalCases: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n  active: PropTypes.bool,\r\n};\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport { sort } from \"./utils\";\r\nimport numeral from \"numeral\";\r\nimport PropType from \"prop-types\";\r\n\r\nexport default function Table({ countries }) {\r\n  const sortedCountries = sort(countries);\r\n  return (\r\n    <div className=\"table-wrapper\">\r\n      <h4>Cases by countries</h4>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Country</th>\r\n            <th>Cases</th>\r\n            <th>Recovered</th>\r\n            <th>Deaths</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedCountries.map((country, index) => (\r\n            <React.Fragment key={index}>\r\n              <tr>\r\n                <td>{country.country}</td>\r\n                <td>{numeral(country.cases).format(\"0a\")}</td>\r\n                <td>{numeral(country.recovered).format(\"0a\")}</td>\r\n                <td>{numeral(country.deaths).format(\"0a\")}</td>\r\n              </tr>\r\n            </React.Fragment>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\nTable.propTypes = {\r\n  countries: PropType.array,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport { casesTypeColors } from \"./utils\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./LineGraph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        type: \"time\",\r\n        time: {\r\n          parser: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nexport default function LineGraph({ casesType }) {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getHistoricalData = async () => {\r\n      const response = await fetch(\r\n        \"https://disease.sh/v3/covid-19/historical/all?lastdays=60\"\r\n      );\r\n      const jsonData = await response.json();\r\n      const chartData = createChartData(jsonData);\r\n      console.log(chartData);\r\n      setData(chartData);\r\n    };\r\n    getHistoricalData();\r\n  }, [casesType]);\r\n\r\n  const createChartData = (mdata) => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in mdata[casesType]) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: mdata[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = mdata[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart__container\">\r\n      <h4>Worldwide {casesType}</h4>\r\n      <Line\r\n        options={options}\r\n        data={{\r\n          datasets: [\r\n            {\r\n              fill: false,\r\n              data: data,\r\n              borderColor: casesTypeColors[casesType].hex,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nLineGraph.propTypes = {\r\n  casesType: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./MapView.css\";\r\nimport { showCirclesOnMap } from \"./utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function MapView({ countries, position, zoom, casesType }) {\r\n  return (\r\n    <div className=\"map__container\">\r\n      <MapContainer center={position} zoom={2}>\r\n        <Map center={position} zoom={zoom} />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {showCirclesOnMap(countries, casesType)}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Map({ center }) {\r\n  const map = useMap();\r\n  map.setView(center);\r\n  return null;\r\n}\r\n\r\nMapView.propTypes = {\r\n  countries: PropTypes.array,\r\n  position: PropTypes.any,\r\n  zoom: PropTypes.number,\r\n  casesType: PropTypes.string,\r\n};\r\n","import { Card, CardContent, MenuItem, Select } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Info from \"./Info\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport MapView from \"./MapView\";\n\nexport default function App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryData, setCountryData] = useState({});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapPosition, setMapPosition] = useState({ lat: 34.6, lng: 40.8 });\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    const getCountries = async () => {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries\");\n      const data = await response.json();\n      setCountries(data);\n    };\n    getCountries();\n  }, []);\n\n  useEffect(() => {\n    const getAllData = async () => {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/all\");\n      const json = await response.json();\n      setCountryData(json);\n    };\n    getAllData();\n  }, []);\n\n  const handleCountryChange = (e) => {\n    const selectedCountry = e.target.value;\n\n    const url =\n      selectedCountry === \"Worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${selectedCountry}`;\n\n    const getCountryData = async () => {\n      const response = await fetch(url);\n      const data = await response.json();\n      setCountryData(data);\n      setCountry(selectedCountry);\n      const mapObj =\n        selectedCountry === \"Worldwide\"\n          ? [34.46, 40.8]\n          : [data.countryInfo.lat, data.countryInfo.long];\n      setMapPosition(mapObj);\n      setMapZoom(4);\n    };\n    getCountryData();\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <h3>Covid 19 Tracker</h3>\n        <Select\n          variant=\"outlined\"\n          value={country}\n          onChange={handleCountryChange}\n          className=\"select__country\"\n        >\n          <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n          {countries.map((countryInfo, index) => (\n            <MenuItem key={index} value={countryInfo.country}>\n              {countryInfo.country}\n            </MenuItem>\n          ))}\n        </Select>\n      </div>\n      <div className=\"app__container\">\n        <div className=\"app__left\">\n          <div className=\"app__infoCard\">\n            <Info\n              active={casesType === \"cases\"}\n              onClick={() => setCasesType(\"cases\")}\n              title=\"Cases\"\n              todayCases={countryData.todayCases}\n              totalCases={countryData.cases}\n              className=\"info-title cases\"\n            />\n            <Info\n              active={casesType === \"recovered\"}\n              onClick={() => setCasesType(\"recovered\")}\n              title=\"Recovered\"\n              todayCases={countryData.todayRecovered}\n              totalCases={countryData.recovered}\n            />\n            <Info\n              active={casesType === \"deaths\"}\n              onClick={() => setCasesType(\"deaths\")}\n              title=\"Deaths\"\n              todayCases={countryData.todayDeaths}\n              totalCases={countryData.deaths}\n            />\n          </div>\n          <div className=\"app__map\">\n            <MapView\n              countries={countries}\n              position={mapPosition}\n              zoom={mapZoom}\n              casesType={casesType}\n            />\n          </div>\n        </div>\n\n        <div className=\"app__right\">\n          <Card variant=\"outlined\">\n            <Table countries={countries} />\n          </Card>\n\n          <Card variant=\"outlined\" className=\"app__chart\">\n            <CardContent>\n              <LineGraph casesType={casesType} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <div className=\"app__footer\">\n        <p>Created by Debarshi</p>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}